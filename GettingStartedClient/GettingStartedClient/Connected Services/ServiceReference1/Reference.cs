//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GettingStartedClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.MyService")]
    public interface MyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MyService/List", ReplyAction="http://tempuri.org/MyService/ListResponse")]
        int List(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MyService/List", ReplyAction="http://tempuri.org/MyService/ListResponse")]
        System.Threading.Tasks.Task<int> ListAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MyService/Add", ReplyAction="http://tempuri.org/MyService/AddResponse")]
        bool Add(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MyService/Add", ReplyAction="http://tempuri.org/MyService/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MyService/Update", ReplyAction="http://tempuri.org/MyService/UpdateResponse")]
        bool Update(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MyService/Update", ReplyAction="http://tempuri.org/MyService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MyService/Delete", ReplyAction="http://tempuri.org/MyService/DeleteResponse")]
        bool Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MyService/Delete", ReplyAction="http://tempuri.org/MyService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MyServiceChannel : GettingStartedClient.ServiceReference1.MyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyServiceClient : System.ServiceModel.ClientBase<GettingStartedClient.ServiceReference1.MyService>, GettingStartedClient.ServiceReference1.MyService {
        
        public MyServiceClient() {
        }
        
        public MyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int List(string name) {
            return base.Channel.List(name);
        }
        
        public System.Threading.Tasks.Task<int> ListAsync(string name) {
            return base.Channel.ListAsync(name);
        }
        
        public bool Add(string name, string password) {
            return base.Channel.Add(name, password);
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(string name, string password) {
            return base.Channel.AddAsync(name, password);
        }
        
        public bool Update(string name, string password) {
            return base.Channel.Update(name, password);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(string name, string password) {
            return base.Channel.UpdateAsync(name, password);
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
    }
}
